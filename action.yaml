name: 'Pull Request Testing for Platform.sh Templates'
description: 'Runs a series of tests on a Platform.sh template project for every Pull Request'
# The following are inputs we might need to implement later so an individual theme can adjust
inputs:
  github-token:
    description: 'Github token to the repository so we can work with the github api. Typically GITHUB_TOKEN'
    required: true
  baseline-url:
    description: 'The URL for the production version of the site. This will be used to create the reference for VRT'
    required: true
  delay-start:
    description: 'Delay the start of testing for X seconds after the PR environment is available.'
    required: false
    default: ''
#  paths_location:
#    description: "Path to the VRT theme-paths.js file. Default is ./.github/tests/vrt/ from the theme's repo root"
#    default: "./.github/tests/vrt/"
#  paths_name:
#    description: "Name of the VRT theme-specific paths file. Not yet implemented"
#    default: "theme-paths.js"
#  threshold:
#    description: 'Percentage of different pixels allowed to pass VRT test'
#    required: false
#    default: "0.1"


# Things we need to do
# Set the GITHUB token
# Verify we have a baseline URL
# Get the PR environment URL
# Perform the VRT
# Post a comment to the PR if the VRT fails indicating where they can view the VRT results report
# Report back the VRT results to the run
runs:
  using: "composite"
  steps:
    - name: 'Set up Github token'
      id: setup-gh-token
      shell: bash
      # @todo is there an advantage to doing this over just using ${{ inputs.github-token }}
      run: echo "GITHUB_TOKEN=${{ inputs.github-token }}" >> $GITHUB_ENV

    # Verify the Baseline URL is set as a repository variable since we cant do VRT without it
    - name: 'Verify Baseline URL'
      id: verify-baseline-url
      shell: bash
      run: |
        baseline=${{ inputs.baseline-url }}
        if [[ -z ${baseline} ]]; then
          echo "::warning::The baseline url is required and can not be blank."
          exit 1;
        fi
    - name: 'Verify Delay'
      id: 'verify-delay'
      if: ${{ inputs.delay-start != '' }}
      shell: bash
      run: |
        if [[ ! ${{ inputs.delay-start }} =~ ^-?[0-9]+$ ]]; then
          msg="The value you gave for delay-start is not a number. I am ignoring it and will not delay the tests."
          msg="${msg} If you need to delay the tests, double check the value you've used, and run the action again."
          echo "::error::${msg}"
        else
          # @todo should we do some type of check for crazy-long delays?
          echo "DELAY_START=${{ inputs.delay-start }}" >> $GITHUB_ENV
          echo "DELAY=true" >> $GITHUB_ENV
        fi

    # Now go get the psh pr environment URL. Can't do VRT without it either
    - name: 'Wait for psh and get target url'
      id: get-target-url
      uses: platformsh/gha-retrieve-psh-prenv-url@main
      with:
        github-token: ${{ env.GITHUB_TOKEN }}

    # Do we need to delay the start of the rest of the tests
    - name: 'Delay start'
      id: 'delay-test-start'
      if: ${{ env.DELAY == 'true' }}
      shell: bash
      run: |
        echo "::notice::Delaying the start of tests for ${DELAY_START} seconds."
        sleep ${DELAY_START};

    # Now we'll do the actual VRT. The VRT action also performs a smoke test on the baseline url
    - name: 'Visual Regression Testing'
      id: test-environment
      uses: platformsh/gha-visual-regression-testing@main
      with:
        baseline_url: ${{ inputs.baseline-url }}
        test_url: ${{ steps.get-target-url.outputs.target_url }}
        report_results: true
        # often the cert provisioning hasn't completed for a PR environment before we begin testing. This causes curl
        # to error with an exit code of 60
        test_url_insecure: true
    # If the VRT Test failed we want to create a comment on the PR to check the artifact created by the VRT
    - name: 'Comment on PR'
      id: comment-on-failed-PR
      if: ${{ steps.test-environment.outputs.results == 'false' }}
      uses: actions/github-script@v6
      with:
        script: |
          address = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}#artifacts`
          failMsg = `Visual Regression Testing failed. Please view the report artifact at ${address}`
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: failMsg
          })

    # Finally, report back the status of the VRT
    - name: 'VRT results?'
      id: vrt-results
      shell: bash
      run: |
        vrt_results=${{ steps.test-environment.outputs.results }}
        echo "::notice::The results from the VRT test is ${vrt_results}"
        if [[ "false" == "${vrt_results}" ]]; then
          echo "::error::Visual Regression Test failed. See attached artifact."

          exit 1
        else
          echo "::notice::Visual Regression Test passed. Carry on, my wayward son."
        fi